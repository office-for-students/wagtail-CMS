version: '3'

services:
  web:
    environment:
      # Postgres
      DBHOST:                       "${DBHOST}"
      DBNAME:                       "${DBNAME}"
      DBUSER:                       "${DBUSER}"
      DBPASSWORD:                   "${DBPASSWORD}"
      DBPORT:                       "5432"
      # Search
      SEARCHAPIHOST:                "${SEARCHAPIHOST}"
      # Widget
      WIDGETAPIHOST:                "${WIDGETAPIHOST}"
      WIDGETAPIKEY:                 "${WIDGETAPIKEY}"
      # CosmosDB (via requests library)
      # (used by the application to get courses and institutions)
      # (these can be found on the App Service under "Configuration")
      # (in absence of values the local MongoDB will be used)
      DATASETAPIHOST:               "${DATASETAPIHOST}"
      DATASETAPIKEY:                "${DATASETAPIKEY}"
      # CosmosDB (via azure.cosmos library)
      # (used to extract data from CosmosDB and populate fixtures)
      # (these can be found on the CosmosDB instance under "Keys")
      AZURECOSMOSDBURI:             "${AZURECOSMOSDBURI}"
      AZURECOSMOSDBKEY:             "${AZURECOSMOSDBKEY}"
      # MongoDB (used for local development and testing)
      MONGODB_HOST:                 "${MONGODB_HOST}"
      MONGODB_USERNAME:             "${MONGODB_USERNAME}"
      MONGODB_PASSWORD:             "${MONGODB_PASSWORD}"
      # A number of courses to load into the fixtures folder for mongodb and tests
      TEST_COURSES:                 "GN12,U18-LAWLLB,AB35,PBSFND-D_FT,U09FUECW,UMDAHFY"
      # Azure storage (institutions.xx.json, subjects.json, versions,json, etc...)
      STORAGE_ACCOUNT_NAME:         "${STORAGE_ACCOUNT_NAME}"
      STORAGEKEY:                   "${STORAGEKEY}"
      # Azure
      AZURE_ACCOUNT_NAME:           "${AZURE_ACCOUNT_NAME}"
      AZURE_ACCOUNT_KEY:            "${AZURE_ACCOUNT_KEY}"
      AZURE_CONTAINER:              "${AZURE_CONTAINER}"
      # Send Grid
      SENDGRID_API_KEY:             "${SENDGRID_API_KEY}"
      SECRET_KEY:                   "${SECRET_KEY}"
      SENDGRID_FROM_EMAIL:          "${SENDGRID_FROM_EMAIL}"
      # Other
      FEEDBACK_API_HOST:            "${FEEDBACK_API_HOST}"
      JSONFILES_STORAGE_CONTAINER:  "${JSONFILES_STORAGE_CONTAINER}"
      # Custom
      ROOT_DOMAIN:                  "${ROOT_DOMAIN}"
      READ_ONLY:                    "${READ_ONLY}"
      SORT_BY_SUBJECT_LIMIT:        "${SORT_BY_SUBJECT_LIMIT}"
      RESPONSE_TIMEOUT_SORT_BY_SUBJECT: "${RESPONSE_TIMEOUT_SORT_BY_SUBJECT}"
      RESPONSE_TIMEOUT_DEFAULT:         "${RESPONSE_TIMEOUT_DEFAULT}"      
      LOCAL:                        "${LOCAL}"
    build: .
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    depends_on:
      - db
      - mongo

  db:
    image: postgres:9.6
    restart: always
    environment:
      POSTGRES_USER: docker
      POSTGRES_PASSWORD: docker
      POSTGRES_DB: django
    volumes:
      - './data/postgres:/var/lib/postgresql/data'

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: "mongodb"
      MONGO_INITDB_ROOT_PASSWORD: "mongodb"
    volumes:
      - './data/mongodb:/data/db'
